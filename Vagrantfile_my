$script_provision = <<-SCRIPT
sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common bc
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo sysctl net.bridge.bridge-nf-call-ip6tables=1
sudo sysctl net.bridge.bridge-nf-call-iptables=1
sudo sysctl net.bridge.bridge-nf-call-arptables=1
sudo cat >> /etc/ufw/sysctl.conf <<EOF
net/bridge/bridge-nf-call-ip6tables = 1
net/bridge/bridge-nf-call-iptables = 1
net/bridge/bridge-nf-call-arptables = 1
EOF
sudo swapoff -a
sed -i '/swap/d' /etc/fstab
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable"
sudo add-apt-repository "deb https://apt.kubernetes.io kubernetes-xenial main"
sudo apt-get update -y
sudo apt-get install -y docker-ce kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
bash -c "sleep 30"
sudo docker run -d --restart=always -p 2376:2375 -v /var/run/docker.sock:/var/run/docker.sock alpine/socat tcp-listen:2375,fork,reuseaddr unix-connect:/var/run/docker.sock
SCRIPT

$master_provision = <<-SCRIPT
sudo kubeadm config images pull
sudo kubeadm init --pod-network-cidr 10.244.0.0/16 --apiserver-advertise-address=192.168.1.17
sudo sysctl net.bridge.bridge-nf-call-iptables=1
cat <<EOF >dashboard-rbac-config.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kube-system
EOF
cat <<EOF >tiller-rbac-config.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tiller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tiller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: tiller
    namespace: kube-system
EOF
sudo KUBECONFIG=/etc/kubernetes/admin.conf kubectl apply -f dashboard-rbac-config.yaml
sudo KUBECONFIG=/etc/kubernetes/admin.conf kubectl apply -f tiller-rbac-config.yaml
echo 'Environment="KUBELET_EXTRA_ARGS=--node-ip=192.168.1.17"' | sudo tee -a /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
sudo KUBECONFIG=/etc/kubernetes/admin.conf kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
#sudo KUBECONFIG=/etc/kubernetes/admin.conf kubectl apply -f https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/kubeadm-kuberouter-all-features.yaml
sudo KUBECONFIG=/etc/kubernetes/admin.conf kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
sudo systemctl daemon-reload
sudo systemctl restart kubelet
bash -c "sleep 30"
sudo KUBECONFIG=/etc/kubernetes/admin.conf kubectl get nodes
sudo KUBECONFIG=/etc/kubernetes/admin.conf kubectl taint nodes --all node-role.kubernetes.io/master-
DASHBOARD_TOKEN=sudo KUBECONFIG=/etc/kubernetes/admin.conf kubectl -n kube-system describe secret $(sudo KUBECONFIG=/etc/kubernetes/admin.conf kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')
JOIN_TOKEN=$(sudo kubeadm token list)
JOIN_HASH=$(openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //')
echo "kubeadm join 192.168.1.17:6443 --token ${JOIN_TOKEN} --discovery-token-ca-cert-hash sha256:${JOIN_HASH}" > join.sh
echo $DASHBOARD_TOKEN > .dashboard-token
curl -so helm.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-v2.12.1-linux-amd64.tar.gz
tar -xzf helm.tar.gz
sudo -s
pushd linux-amd64
export KUBECONFIG=/etc/kubernetes/admin.conf
bash -c "sleep 30"
./helm init --service-account tiller
./helm version
./helm repo update
cp helm /usr/bin/helm
popd
#helm install stable/mysql
#git clone https://github.com/helm/charts.git
git clone https://github.com/kubernetes-incubator/metrics-server.git
pushd metrics-server
kubectl create -f deploy/1.8+/
popd
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
SCRIPT

$worker_provision = <<-SCRIPT
sudo kubeadm config images pull
#sudo kubeadm init --pod-network-cidr 10.244.0.0/16 --apiserver-advertise-address=192.168.1.18
sudo sysctl net.bridge.bridge-nf-call-iptables=1
echo 'Environment="KUBELET_EXTRA_ARGS=--node-ip=192.168.1.18"' | sudo tee -a /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
sudo systemctl daemon-reload
sudo systemctl restart kubelet
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
SCRIPT

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/xenial64"

  config.vm.provision "shell", inline: $script_provision

  config.vm.provider "virtualbox" do |v|
    v.memory = 2048
    v.cpus = 2
  end

  config.vm.define "master", primary: true do |node|
    node.vm.hostname = "master"
    node.vm.network "private_network", ip: "192.168.1.17"
    node.vm.provision "shell", inline: $master_provision
    node.vm.provider  "virtualbox" do |v|
      v.memory = 4096
    end
  end

  config.vm.define "worker", autostart: false do |node|
    node.vm.hostname = "worker"
    node.vm.network "private_network", ip: "192.168.1.18"
    node.vm.provision "shell", inline: $worker_provision
    node.vm.provider  "virtualbox" do |v|
      v.memory = 8092
    end
  end

end
